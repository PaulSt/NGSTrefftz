#ifndef FILE_SVDTREFFTZ_HPP
#define FILE_SVDTREFFTZ_HPP
#include <comp.hpp>
#include <python_comp.hpp>

#ifndef FILE_INTEGRATORCFHPP
#include <integratorcf.hpp>
#define FILE_INTEGRATORCFHPP
#endif

/// For a mesh element, this struct holds the
/// ndof for the Trefftz part of the conforming Trefftz space.
/// Convention:
/// elmat = (elmat_conforming | elmat_trefftz)
/// where elmat_trefftz.width == ndof_trefftz
///
/// Then, for ndof_conforming there holds:
/// ndof_confrming := elmat.width - ndof_trefftz
template <typename SCAL> struct ElmatWithTrefftzInfo
{
  ngla::Matrix<SCAL> elmat;
  size_t ndof_trefftz;
};

namespace ngcomp
{

  class TrefftzEmbedding
  {
    shared_ptr<FESpace> fes = nullptr;
    shared_ptr<FESpace> fes_test = nullptr;
    shared_ptr<FESpace> fes_conformity = nullptr;
    shared_ptr<SumOfIntegrals> top;
    shared_ptr<SumOfIntegrals> trhs;
    shared_ptr<SumOfIntegrals> cop;
    shared_ptr<SumOfIntegrals> crhs;
    shared_ptr<MeshAccess> ma;

    std::variant<size_t, double> ndof_trefftz;
    // shared_ptr<std::map<std::string, Vector<SCAL>>> stats = nullptr;

  public:
    vector<optional<ElmatWithTrefftzInfo<double>>> etmats;
    vector<optional<ElmatWithTrefftzInfo<Complex>>> etmatsc;
    shared_ptr<BaseVector> psol;

    TrefftzEmbedding (shared_ptr<SumOfIntegrals> _top,
                      shared_ptr<SumOfIntegrals> _trhs,
                      shared_ptr<SumOfIntegrals> _cop,
                      shared_ptr<SumOfIntegrals> _crhs, size_t _ndof_trefftz,
                      double _eps, shared_ptr<FESpace> _fes = nullptr,
                      shared_ptr<FESpace> _fes_test = nullptr,
                      shared_ptr<FESpace> _fes_conformity = nullptr);

    shared_ptr<GridFunction>
    Embed (const shared_ptr<const GridFunction> tgfu) const;
    shared_ptr<GridFunction> GetParticularSolution ();
    shared_ptr<BaseMatrix> GetEmbedding ();
    shared_ptr<FESpace> GetFES () const { return fes; }
    shared_ptr<FESpace> GetFESconf () const { return fes_conformity; }
  };

  /// creates an embedding marix T for the given operations `top`,
  /// `cop`, `crhs`.
  ///
  /// The embedding is subject to the constraints specified in
  /// `cop` and `crhs`.
  ///
  ///  @param top the differential operation. Bilinear from on `fes` x
  ///  `fes_test`.
  ///
  ///  @param fes the trial finite element space of `top`
  ///
  ///  @param fes_test the test finite element space of `top`
  ///
  ///  @param cop left hand side of the conformity operation. Bilinear form
  ///  on `fes` x `fes_conformity`.
  ///
  ///  @param crhs right hand side of the conformity operation. Bilinear
  ///  form on `fes_conformity` x `fes_conformity`.
  ///
  ///  @param fes_conformity finite element space of the conformity operation
  ///
  ///  @param trhs right hand sinde to the Trefftz operation `top`.
  ///  Linear form on `fes_test`.
  ///
  ///  @param ndof_trefftz number of degrees of freedom per element
  ///      in the Trefftz finite element space on `fes`, generated by `top`
  ///      (i.e. the local dimension of the kernel of `top` on one element).
  ///      If this is `nullopt`, then `ndof_trefftz` will be set to `ndof -
  ///      ndof_conforming` for each element. Thus it is assumed, that the
  ///      kernel of `top` is sufficiently big.
  ///
  ///  @return (T, f), the embedding `T` and particlar solution `f`. `T` is
  ///  represented as a vector of all element matrices.
  template <typename SCAL>
  pair<vector<optional<ElmatWithTrefftzInfo<SCAL>>>,
       shared_ptr<ngla::BaseVector>>
  EmbTrefftz (shared_ptr<const SumOfIntegrals> top, const FESpace &fes,
              const FESpace &fes_test, shared_ptr<const SumOfIntegrals> cop,
              shared_ptr<const SumOfIntegrals> crhs,
              shared_ptr<const FESpace> fes_conformity,
              shared_ptr<const SumOfIntegrals> trhs,
              const std::variant<size_t, double> ndof_trefftz,
              shared_ptr<std::map<std::string, Vector<SCAL>>> stats = nullptr);

  /// Represents the FESpace, that is generated by the embedded Trefftz method.
  /// Use the \ref EmbTrefftzFESpace(shared_ptr<T>) constructor to build the
  /// space from a given (trial) FESpcae, use \ref EmbTrefftzFESpace::SetOp to
  /// specify the operation that the Trefftz space should be build from.
  ///
  /// @tparam T must be a FESpace
  template <typename T>
  class EmbTrefftzFESpace
      : public T //, public std::enable_shared_from_this<EmbTrefftzFESpace>
  {
    shared_ptr<TrefftzEmbedding> emb;
    static_assert (std::is_base_of_v<FESpace, T>, "T must be a FESpace");
    vector<optional<ElmatWithTrefftzInfo<double>>> etmats;
    vector<optional<ElmatWithTrefftzInfo<Complex>>> etmatsc;
    shared_ptr<T> fes;
    shared_ptr<const FESpace> fes_conformity;

    /// contains the mapping of Element Number to the associated Dofs
    Table<DofId> elnr_to_dofs;

  public:
    EmbTrefftzFESpace (shared_ptr<MeshAccess> ama, const Flags &flags,
                       bool parseflags = false)
        : T (ama, flags, parseflags)
    {
      throw Exception ("Please construct via an embedding");
    }

    EmbTrefftzFESpace (shared_ptr<TrefftzEmbedding> aemb)
        : T (aemb->GetFES ()->GetMeshAccess (), aemb->GetFES ()->GetFlags (),
             false),
          emb (aemb)
    {
      fes = dynamic_pointer_cast<T> (aemb->GetFES ());
      this->name = "EmbTrefftzFESpace(" + fes->GetClassName () + ")";
      this->type = "embt";
      this->needs_transform_vec = true;
      this->iscomplex = fes->IsComplex ();
      if constexpr (std::is_same_v<CompoundFESpace, T>)
        for (auto space : fes->Spaces ())
          this->AddSpace (space);

      etmats = emb->etmats;
      etmatsc = emb->etmatsc;
      fes_conformity = emb->GetFESconf ();
      adjustDofsAfterSetOp ();
      // this->Update();
      // this->UpdateDofTables();
      // this->UpdateCouplingDofArray();
      // this->FinalizeUpdate();
    }

    void GetDofNrs (ElementId ei, Array<DofId> &dnums) const override;

    virtual void VTransformMR (ElementId ei, const SliceMatrix<double> mat,
                               TRANSFORM_TYPE type) const override;

    virtual void VTransformMC (ElementId ei, const SliceMatrix<Complex> mat,
                               TRANSFORM_TYPE type) const override;

    virtual void VTransformVR (ElementId ei, const SliceVector<double> vec,
                               TRANSFORM_TYPE type) const override;

    virtual void VTransformVC (ElementId ei, const SliceVector<Complex> vec,
                               TRANSFORM_TYPE type) const override;

    virtual string GetClassName () const override;

  private:
    /// adjusts the dofs of the space. Will be called by SetOp.
    void adjustDofsAfterSetOp ();
  };
}

#ifdef NGS_PYTHON
#include <python_ngstd.hpp>
void ExportEmbTrefftz (py::module m);
#endif // NGS_PYTHON

#endif
