#ifndef FILE_CONSTRAINT_TREFFTZ_HPP
#define FILE_CONSTRAINT_TREFFTZ_HPP

#include <expr.hpp>
#include <fespace.hpp>
#include <matrix.hpp>
#include <memory>
#include <fem.hpp>
#include <pybind11/pybind11.h>
#include <python_ngstd.hpp>

namespace ngcomp
{
  /// creates an embedding marix P for the given operation `op`.
  ///
  /// The embedding is subject to the constraints specified in
  /// `cop_lhs` and `cop_rhs`.
  ///
  ///  @param op the differential operation
  ///
  ///  @param fes the finite element space of `op`
  ///
  ///  @param cop_lhs left hand side of the constraint operation
  ///
  ///  @param cop_rhs right hand side of the constraint operation
  ///
  ///  @param fes_constraint finite element space of the constraint operation
  ///
  ///  @param ndof_trefftz number of degrees of freedom per element
  ///      in the Trefftz finite element space on `fes`, generated by `op`
  ///      (i.e. the local dimension of the kernel of `op` on one element)
  ///
  ///  @return P, represented as a vector of all element matrices
  template <class SCAL>
  tuple<vector<shared_ptr<Matrix<SCAL>>>, shared_ptr<BaseVector>>
  ConstraintTrefftzEmbedding (std::shared_ptr<ngfem::SumOfIntegrals> op,
                              std::shared_ptr<FESpace> fes,
                              std::shared_ptr<ngfem::SumOfIntegrals> cop_lhs,
                              std::shared_ptr<ngfem::SumOfIntegrals> cop_rhs,
                              std::shared_ptr<FESpace> fes_constraint,
                              const size_t ndof_trefftz);
}

#ifdef NGS_PYTHON
#include <python_ngstd.hpp>
void ExportConstraintTrefftzEmbedding (py::module m);
#endif // NGS_PYTHON

#endif
